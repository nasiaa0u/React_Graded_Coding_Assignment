{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react'; // recursion (flat tree structure)\n\nfunction flatRecord(record, indent, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = [];\n  arr.push({\n    record: record,\n    indent: indent\n  });\n  var key = getRowKey(record);\n  var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);\n\n  if (record && Array.isArray(record[childrenColumnName]) && expanded) {\n    // expanded state, flat record\n    for (var i = 0; i < record[childrenColumnName].length; i += 1) {\n      var tempArr = flatRecord(record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey);\n      arr.push.apply(arr, _toConsumableArray(tempArr));\n    }\n  }\n\n  return arr;\n}\n/**\n * flat tree data on expanded state\n *\n * @export\n * @template T\n * @param {*} data : table data\n * @param {string} childrenColumnName : 指定树形结构的列名\n * @param {Set<Key>} expandedKeys : 展开的行对应的keys\n * @param {GetRowKey<T>} getRowKey  : 获取当前rowKey的方法\n * @returns flattened data\n */\n\n\nexport default function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = React.useMemo(function () {\n    if (expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.size) {\n      var temp = []; // collect flattened record\n\n      for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {\n        var record = data[i];\n        temp.push.apply(temp, _toConsumableArray(flatRecord(record, 0, childrenColumnName, expandedKeys, getRowKey)));\n      }\n\n      return temp;\n    }\n\n    return data === null || data === void 0 ? void 0 : data.map(function (item) {\n      return {\n        record: item,\n        indent: 0\n      };\n    });\n  }, [data, childrenColumnName, expandedKeys, getRowKey]);\n  return arr;\n}","map":{"version":3,"names":["_toConsumableArray","React","flatRecord","record","indent","childrenColumnName","expandedKeys","getRowKey","arr","push","key","expanded","has","Array","isArray","i","length","tempArr","apply","useFlattenRecords","data","useMemo","size","temp","map","item"],"sources":["C:/Users/hp/Desktop/Assignments-2022/moviestips/node_modules/rc-table/es/hooks/useFlattenRecords.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react'; // recursion (flat tree structure)\n\nfunction flatRecord(record, indent, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = [];\n  arr.push({\n    record: record,\n    indent: indent\n  });\n  var key = getRowKey(record);\n  var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);\n\n  if (record && Array.isArray(record[childrenColumnName]) && expanded) {\n    // expanded state, flat record\n    for (var i = 0; i < record[childrenColumnName].length; i += 1) {\n      var tempArr = flatRecord(record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey);\n      arr.push.apply(arr, _toConsumableArray(tempArr));\n    }\n  }\n\n  return arr;\n}\n/**\n * flat tree data on expanded state\n *\n * @export\n * @template T\n * @param {*} data : table data\n * @param {string} childrenColumnName : 指定树形结构的列名\n * @param {Set<Key>} expandedKeys : 展开的行对应的keys\n * @param {GetRowKey<T>} getRowKey  : 获取当前rowKey的方法\n * @returns flattened data\n */\n\n\nexport default function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = React.useMemo(function () {\n    if (expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.size) {\n      var temp = []; // collect flattened record\n\n      for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {\n        var record = data[i];\n        temp.push.apply(temp, _toConsumableArray(flatRecord(record, 0, childrenColumnName, expandedKeys, getRowKey)));\n      }\n\n      return temp;\n    }\n\n    return data === null || data === void 0 ? void 0 : data.map(function (item) {\n      return {\n        record: item,\n        indent: 0\n      };\n    });\n  }, [data, childrenColumnName, expandedKeys, getRowKey]);\n  return arr;\n}"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CAAgC;;AAEhC,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,kBAApC,EAAwDC,YAAxD,EAAsEC,SAAtE,EAAiF;EAC/E,IAAIC,GAAG,GAAG,EAAV;EACAA,GAAG,CAACC,IAAJ,CAAS;IACPN,MAAM,EAAEA,MADD;IAEPC,MAAM,EAAEA;EAFD,CAAT;EAIA,IAAIM,GAAG,GAAGH,SAAS,CAACJ,MAAD,CAAnB;EACA,IAAIQ,QAAQ,GAAGL,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACM,GAAb,CAAiBF,GAAjB,CAA3E;;EAEA,IAAIP,MAAM,IAAIU,KAAK,CAACC,OAAN,CAAcX,MAAM,CAACE,kBAAD,CAApB,CAAV,IAAuDM,QAA3D,EAAqE;IACnE;IACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAAM,CAACE,kBAAD,CAAN,CAA2BW,MAA/C,EAAuDD,CAAC,IAAI,CAA5D,EAA+D;MAC7D,IAAIE,OAAO,GAAGf,UAAU,CAACC,MAAM,CAACE,kBAAD,CAAN,CAA2BU,CAA3B,CAAD,EAAgCX,MAAM,GAAG,CAAzC,EAA4CC,kBAA5C,EAAgEC,YAAhE,EAA8EC,SAA9E,CAAxB;MACAC,GAAG,CAACC,IAAJ,CAASS,KAAT,CAAeV,GAAf,EAAoBR,kBAAkB,CAACiB,OAAD,CAAtC;IACD;EACF;;EAED,OAAOT,GAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASW,iBAAT,CAA2BC,IAA3B,EAAiCf,kBAAjC,EAAqDC,YAArD,EAAmEC,SAAnE,EAA8E;EAC3F,IAAIC,GAAG,GAAGP,KAAK,CAACoB,OAAN,CAAc,YAAY;IAClC,IAAIf,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACgB,IAA7E,EAAmF;MACjF,IAAIC,IAAI,GAAG,EAAX,CADiF,CAClE;;MAEf,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIK,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACJ,MAArD,CAAjB,EAA+ED,CAAC,IAAI,CAApF,EAAuF;QACrF,IAAIZ,MAAM,GAAGiB,IAAI,CAACL,CAAD,CAAjB;QACAQ,IAAI,CAACd,IAAL,CAAUS,KAAV,CAAgBK,IAAhB,EAAsBvB,kBAAkB,CAACE,UAAU,CAACC,MAAD,EAAS,CAAT,EAAYE,kBAAZ,EAAgCC,YAAhC,EAA8CC,SAA9C,CAAX,CAAxC;MACD;;MAED,OAAOgB,IAAP;IACD;;IAED,OAAOH,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACI,GAAL,CAAS,UAAUC,IAAV,EAAgB;MAC1E,OAAO;QACLtB,MAAM,EAAEsB,IADH;QAELrB,MAAM,EAAE;MAFH,CAAP;IAID,CALkD,CAAnD;EAMD,CAlBS,EAkBP,CAACgB,IAAD,EAAOf,kBAAP,EAA2BC,YAA3B,EAAyCC,SAAzC,CAlBO,CAAV;EAmBA,OAAOC,GAAP;AACD"},"metadata":{},"sourceType":"module"}