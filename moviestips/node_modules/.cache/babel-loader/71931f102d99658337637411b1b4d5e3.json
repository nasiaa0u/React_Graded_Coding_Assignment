{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport generateSelector from \"rc-select/es/generate\";\nimport { getLabeledValue } from \"rc-select/es/utils/valueUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport omit from \"rc-util/es/omit\";\nimport { INTERNAL_PROPS_MARK } from \"rc-select/es/interface/generator\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport warning from \"rc-util/es/warning\";\nimport TreeNode from './TreeNode';\nimport { flattenOptions, filterOptions, isValueDisabled, findValueOption, addValue, removeValue, getRawValueLabeled, toArray, fillFieldNames } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { SelectContext } from './Context';\nimport useTreeData from './hooks/useTreeData';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport { formatStrategyKeys, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport { fillAdditionalInfo } from './utils/legacyUtil';\nimport useSelectValues from './hooks/useSelectValues';\nvar OMIT_PROPS = ['expandedKeys', 'treeData', 'treeCheckable', 'showCheckedStrategy', 'searchPlaceholder', 'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeNodeFilterProp', 'filterTreeNode', 'dropdownPopupAlign', 'treeDefaultExpandAll', 'treeCheckStrictly', 'treeExpandedKeys', 'treeLoadedKeys', 'treeMotion', 'onTreeExpand', 'onTreeLoad', 'labelRender', 'loadData', 'treeDataSimpleMode', 'treeNodeLabelProp', 'treeDefaultExpandedKeys'];\nexport default function generate(config) {\n  var prefixCls = config.prefixCls,\n      optionList = config.optionList;\n  var RefSelect = generateSelector({\n    prefixCls: prefixCls,\n    components: {\n      optionList: optionList\n    },\n    // Not use generate since we will handle ourself\n    convertChildrenToData: function convertChildrenToData() {\n      return null;\n    },\n    flattenOptions: flattenOptions,\n    // Handle `optionLabelProp` in TreeSelect component\n    getLabeledValue: getLabeledValue,\n    filterOptions: filterOptions,\n    isValueDisabled: isValueDisabled,\n    findValueOption: findValueOption,\n    omitDOMProps: function omitDOMProps(props) {\n      return omit(props, OMIT_PROPS);\n    }\n  });\n  RefSelect.displayName = 'Select'; // =================================================================================\n  // =                                      Tree                                     =\n  // =================================================================================\n\n  var RefTreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    var fieldNames = props.fieldNames,\n        multiple = props.multiple,\n        treeCheckable = props.treeCheckable,\n        treeCheckStrictly = props.treeCheckStrictly,\n        _props$showCheckedStr = props.showCheckedStrategy,\n        showCheckedStrategy = _props$showCheckedStr === void 0 ? 'SHOW_CHILD' : _props$showCheckedStr,\n        labelInValue = props.labelInValue,\n        loadData = props.loadData,\n        treeLoadedKeys = props.treeLoadedKeys,\n        _props$treeNodeFilter = props.treeNodeFilterProp,\n        treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n        treeNodeLabelProp = props.treeNodeLabelProp,\n        treeDataSimpleMode = props.treeDataSimpleMode,\n        treeData = props.treeData,\n        treeExpandedKeys = props.treeExpandedKeys,\n        treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n        treeDefaultExpandAll = props.treeDefaultExpandAll,\n        children = props.children,\n        treeIcon = props.treeIcon,\n        showTreeIcon = props.showTreeIcon,\n        switcherIcon = props.switcherIcon,\n        treeLine = props.treeLine,\n        treeMotion = props.treeMotion,\n        filterTreeNode = props.filterTreeNode,\n        dropdownPopupAlign = props.dropdownPopupAlign,\n        onChange = props.onChange,\n        onTreeExpand = props.onTreeExpand,\n        onTreeLoad = props.onTreeLoad,\n        onDropdownVisibleChange = props.onDropdownVisibleChange,\n        onSelect = props.onSelect,\n        onDeselect = props.onDeselect,\n        labelRender = props.labelRender;\n    var mergedCheckable = treeCheckable || treeCheckStrictly;\n    var mergedMultiple = multiple || mergedCheckable;\n    var treeConduction = treeCheckable && !treeCheckStrictly;\n    var mergedLabelInValue = treeCheckStrictly || labelInValue; // ======================= Tree Data =======================\n    // FieldNames\n\n    var mergedFieldNames = fillFieldNames(fieldNames, true); // Legacy both support `label` or `title` if not set.\n    // We have to fallback to function to handle this\n\n    var getTreeNodeTitle = function getTreeNodeTitle(node) {\n      if (!treeData) {\n        return node.title;\n      }\n\n      if (mergedFieldNames === null || mergedFieldNames === void 0 ? void 0 : mergedFieldNames.label) {\n        return node[mergedFieldNames.label];\n      }\n\n      return node.label || node.title;\n    };\n\n    var getTreeNodeLabelProp = function getTreeNodeLabelProp(entity, val) {\n      if (labelRender) {\n        return labelRender(entity, val);\n      } // Skip since entity not exist\n\n\n      if (!entity) {\n        return undefined;\n      }\n\n      var node = entity.data.node;\n\n      if (treeNodeLabelProp) {\n        return node[treeNodeLabelProp];\n      }\n\n      return getTreeNodeTitle(node);\n    };\n\n    var mergedTreeData = useTreeData(treeData, children, {\n      getLabelProp: getTreeNodeTitle,\n      simpleMode: treeDataSimpleMode,\n      fieldNames: mergedFieldNames\n    });\n    var flattedOptions = useMemo(function () {\n      return flattenOptions(mergedTreeData);\n    }, [mergedTreeData]);\n\n    var _useKeyValueMap = useKeyValueMap(flattedOptions),\n        _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n        cacheKeyMap = _useKeyValueMap2[0],\n        cacheValueMap = _useKeyValueMap2[1];\n\n    var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n        _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n        getEntityByKey = _useKeyValueMapping2[0],\n        getEntityByValue = _useKeyValueMapping2[1]; // Only generate keyEntities for check conduction when is `treeCheckable`\n\n\n    var _useMemo = useMemo(function () {\n      if (treeConduction) {\n        return convertDataToEntities(mergedTreeData);\n      }\n\n      return {\n        keyEntities: null\n      };\n    }, [mergedTreeData, treeCheckable, treeCheckStrictly]),\n        conductKeyEntities = _useMemo.keyEntities; // ========================== Ref ==========================\n\n\n    var selectRef = React.useRef(null);\n    React.useImperativeHandle(ref, function () {\n      return {\n        scrollTo: selectRef.current.scrollTo,\n        focus: selectRef.current.focus,\n        blur: selectRef.current.blur,\n\n        /** @private Internal usage. It's save to remove if `rc-cascader` not use it any longer */\n        getEntityByValue: getEntityByValue\n      };\n    }); // ========================= Value =========================\n\n    var _useMergedState = useMergedState(props.defaultValue, {\n      value: props.value\n    }),\n        _useMergedState2 = _slicedToArray(_useMergedState, 2),\n        value = _useMergedState2[0],\n        setValue = _useMergedState2[1];\n    /** Get `missingRawValues` which not exist in the tree yet */\n\n\n    var splitRawValues = function splitRawValues(newRawValues) {\n      var missingRawValues = [];\n      var existRawValues = []; // Keep missing value in the cache\n\n      newRawValues.forEach(function (val) {\n        if (getEntityByValue(val)) {\n          existRawValues.push(val);\n        } else {\n          missingRawValues.push(val);\n        }\n      });\n      return {\n        missingRawValues: missingRawValues,\n        existRawValues: existRawValues\n      };\n    };\n\n    var _useMemo2 = useMemo(function () {\n      var valueHalfCheckedKeys = [];\n      var newRawValues = [];\n      toArray(value).forEach(function (item) {\n        if (item && _typeof(item) === 'object' && 'value' in item) {\n          if (item.halfChecked && treeCheckStrictly) {\n            var entity = getEntityByValue(item.value);\n            valueHalfCheckedKeys.push(entity ? entity.key : item.value);\n          } else {\n            newRawValues.push(item.value);\n          }\n        } else {\n          newRawValues.push(item);\n        }\n      }); // We need do conduction of values\n      // We need do conduction of values\n\n      if (treeConduction) {\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n\n        var _conductCheck = conductCheck(keyList, true, conductKeyEntities),\n            checkedKeys = _conductCheck.checkedKeys,\n            halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n        return [[].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        }))), halfCheckedKeys];\n      }\n\n      return [newRawValues, valueHalfCheckedKeys];\n    }, [value, flattedOptions, mergedMultiple, mergedLabelInValue, treeCheckable, treeCheckStrictly]),\n        _useMemo3 = _slicedToArray(_useMemo2, 2),\n        rawValues = _useMemo3[0],\n        rawHalfCheckedKeys = _useMemo3[1];\n\n    var selectValues = useSelectValues(rawValues, {\n      treeConduction: treeConduction,\n      value: value,\n      showCheckedStrategy: showCheckedStrategy,\n      conductKeyEntities: conductKeyEntities,\n      getEntityByValue: getEntityByValue,\n      getEntityByKey: getEntityByKey,\n      getLabelProp: getTreeNodeLabelProp\n    });\n\n    var triggerChange = function triggerChange(newRawValues, extra, source) {\n      setValue(mergedMultiple ? newRawValues : newRawValues[0]);\n\n      if (onChange) {\n        var eventValues = newRawValues;\n\n        if (treeConduction && showCheckedStrategy !== 'SHOW_ALL') {\n          var keyList = newRawValues.map(function (val) {\n            var entity = getEntityByValue(val);\n            return entity ? entity.key : val;\n          });\n          var formattedKeyList = formatStrategyKeys(keyList, showCheckedStrategy, conductKeyEntities);\n          eventValues = formattedKeyList.map(function (key) {\n            var entity = getEntityByKey(key);\n            return entity ? entity.data.value : key;\n          });\n        }\n\n        var _ref = extra || {\n          triggerValue: undefined,\n          selected: undefined\n        },\n            triggerValue = _ref.triggerValue,\n            selected = _ref.selected;\n\n        var returnValues = mergedLabelInValue ? getRawValueLabeled(eventValues, value, getEntityByValue, getTreeNodeLabelProp) : eventValues; // We need fill half check back\n\n        if (treeCheckStrictly) {\n          var halfValues = rawHalfCheckedKeys.map(function (key) {\n            var entity = getEntityByKey(key);\n            return entity ? entity.data.value : key;\n          }).filter(function (val) {\n            return !eventValues.includes(val);\n          });\n          returnValues = [].concat(_toConsumableArray(returnValues), _toConsumableArray(getRawValueLabeled(halfValues, value, getEntityByValue, getTreeNodeLabelProp)));\n        }\n\n        var additionalInfo = {\n          // [Legacy] Always return as array contains label & value\n          preValue: selectValues,\n          triggerValue: triggerValue\n        }; // [Legacy] Fill legacy data if user query.\n        // This is expansive that we only fill when user query\n        // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n        var showPosition = true;\n\n        if (treeCheckStrictly || source === 'selection' && !selected) {\n          showPosition = false;\n        }\n\n        fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition);\n\n        if (mergedCheckable) {\n          additionalInfo.checked = selected;\n        } else {\n          additionalInfo.selected = selected;\n        }\n\n        onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : eventValues.map(function (val) {\n          var entity = getEntityByValue(val);\n          return entity ? entity.data.title : null;\n        }), additionalInfo);\n      }\n    };\n\n    var onInternalSelect = function onInternalSelect(selectValue, option, source) {\n      var eventValue = mergedLabelInValue ? selectValue : selectValue;\n\n      if (!mergedMultiple) {\n        // Single mode always set value\n        triggerChange([selectValue], {\n          selected: true,\n          triggerValue: selectValue\n        }, source);\n      } else {\n        var newRawValues = addValue(rawValues, selectValue); // Add keys if tree conduction\n\n        if (treeConduction) {\n          // Should keep missing values\n          var _splitRawValues2 = splitRawValues(newRawValues),\n              missingRawValues = _splitRawValues2.missingRawValues,\n              existRawValues = _splitRawValues2.existRawValues;\n\n          var keyList = existRawValues.map(function (val) {\n            return getEntityByValue(val).key;\n          });\n\n          var _conductCheck2 = conductCheck(keyList, true, conductKeyEntities),\n              checkedKeys = _conductCheck2.checkedKeys;\n\n          newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n            return getEntityByKey(key).data.value;\n          })));\n        }\n\n        triggerChange(newRawValues, {\n          selected: true,\n          triggerValue: selectValue\n        }, source);\n      }\n\n      if (onSelect) {\n        onSelect(eventValue, option);\n      }\n    };\n\n    var onInternalDeselect = function onInternalDeselect(selectValue, option, source) {\n      var eventValue = mergedLabelInValue ? selectValue : selectValue;\n      var newRawValues = removeValue(rawValues, selectValue); // Remove keys if tree conduction\n\n      if (treeConduction) {\n        var _splitRawValues3 = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues3.missingRawValues,\n            existRawValues = _splitRawValues3.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n\n        var _conductCheck3 = conductCheck(keyList, {\n          checked: false,\n          halfCheckedKeys: rawHalfCheckedKeys\n        }, conductKeyEntities),\n            checkedKeys = _conductCheck3.checkedKeys;\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: false,\n        triggerValue: selectValue\n      }, source);\n\n      if (onDeselect) {\n        onDeselect(eventValue, option);\n      }\n    };\n\n    var onInternalClear = function onInternalClear() {\n      triggerChange([], null, 'clear');\n    }; // ========================= Open ==========================\n\n\n    var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n      if (onDropdownVisibleChange) {\n        var legacyParam = {};\n        Object.defineProperty(legacyParam, 'documentClickClose', {\n          get: function get() {\n            warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n            return false;\n          }\n        });\n        onDropdownVisibleChange(open, legacyParam);\n      }\n    }, [onDropdownVisibleChange]); // ======================== Warning ========================\n\n    if (process.env.NODE_ENV !== 'production') {\n      warningProps(props);\n    } // ======================== Render =========================\n    // We pass some props into select props style\n\n\n    var selectProps = {\n      optionLabelProp: null,\n      optionFilterProp: treeNodeFilterProp,\n      dropdownAlign: dropdownPopupAlign,\n      internalProps: {\n        mark: INTERNAL_PROPS_MARK,\n        onClear: onInternalClear,\n        skipTriggerChange: true,\n        skipTriggerSelect: true,\n        onRawSelect: onInternalSelect,\n        onRawDeselect: onInternalDeselect\n      }\n    };\n\n    if ('filterTreeNode' in props) {\n      selectProps.filterOption = filterTreeNode;\n    }\n\n    var selectContext = React.useMemo(function () {\n      return {\n        checkable: mergedCheckable,\n        loadData: loadData,\n        treeLoadedKeys: treeLoadedKeys,\n        onTreeLoad: onTreeLoad,\n        checkedKeys: rawValues,\n        halfCheckedKeys: rawHalfCheckedKeys,\n        treeDefaultExpandAll: treeDefaultExpandAll,\n        treeExpandedKeys: treeExpandedKeys,\n        treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n        onTreeExpand: onTreeExpand,\n        treeIcon: treeIcon,\n        treeMotion: treeMotion,\n        showTreeIcon: showTreeIcon,\n        switcherIcon: switcherIcon,\n        treeLine: treeLine,\n        treeNodeFilterProp: treeNodeFilterProp,\n        getEntityByKey: getEntityByKey,\n        getEntityByValue: getEntityByValue\n      };\n    }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawValues, rawHalfCheckedKeys, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, getEntityByKey, getEntityByValue]);\n    return /*#__PURE__*/React.createElement(SelectContext.Provider, {\n      value: selectContext\n    }, /*#__PURE__*/React.createElement(RefSelect, _extends({\n      ref: selectRef,\n      mode: mergedMultiple ? 'multiple' : null\n    }, props, selectProps, {\n      value: selectValues // We will handle this ourself since we need calculate conduction\n      ,\n      labelInValue: true,\n      options: mergedTreeData,\n      onChange: null,\n      onSelect: null,\n      onDeselect: null,\n      onDropdownVisibleChange: onInternalDropdownVisibleChange\n    })));\n  });\n  RefTreeSelect.displayName = 'TreeSelect'; // =================================================================================\n  // =                                    Generic                                    =\n  // =================================================================================\n\n  var TreeSelect = RefTreeSelect;\n  TreeSelect.TreeNode = TreeNode;\n  TreeSelect.SHOW_ALL = SHOW_ALL;\n  TreeSelect.SHOW_PARENT = SHOW_PARENT;\n  TreeSelect.SHOW_CHILD = SHOW_CHILD;\n  return TreeSelect;\n}","map":{"version":3,"names":["_extends","_toConsumableArray","_typeof","_slicedToArray","React","useMemo","generateSelector","getLabeledValue","convertDataToEntities","conductCheck","omit","INTERNAL_PROPS_MARK","useMergedState","warning","TreeNode","flattenOptions","filterOptions","isValueDisabled","findValueOption","addValue","removeValue","getRawValueLabeled","toArray","fillFieldNames","warningProps","SelectContext","useTreeData","useKeyValueMap","useKeyValueMapping","formatStrategyKeys","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","fillAdditionalInfo","useSelectValues","OMIT_PROPS","generate","config","prefixCls","optionList","RefSelect","components","convertChildrenToData","omitDOMProps","props","displayName","RefTreeSelect","forwardRef","ref","fieldNames","multiple","treeCheckable","treeCheckStrictly","_props$showCheckedStr","showCheckedStrategy","labelInValue","loadData","treeLoadedKeys","_props$treeNodeFilter","treeNodeFilterProp","treeNodeLabelProp","treeDataSimpleMode","treeData","treeExpandedKeys","treeDefaultExpandedKeys","treeDefaultExpandAll","children","treeIcon","showTreeIcon","switcherIcon","treeLine","treeMotion","filterTreeNode","dropdownPopupAlign","onChange","onTreeExpand","onTreeLoad","onDropdownVisibleChange","onSelect","onDeselect","labelRender","mergedCheckable","mergedMultiple","treeConduction","mergedLabelInValue","mergedFieldNames","getTreeNodeTitle","node","title","label","getTreeNodeLabelProp","entity","val","undefined","data","mergedTreeData","getLabelProp","simpleMode","flattedOptions","_useKeyValueMap","_useKeyValueMap2","cacheKeyMap","cacheValueMap","_useKeyValueMapping","_useKeyValueMapping2","getEntityByKey","getEntityByValue","_useMemo","keyEntities","conductKeyEntities","selectRef","useRef","useImperativeHandle","scrollTo","current","focus","blur","_useMergedState","defaultValue","value","_useMergedState2","setValue","splitRawValues","newRawValues","missingRawValues","existRawValues","forEach","push","_useMemo2","valueHalfCheckedKeys","item","halfChecked","key","_splitRawValues","keyList","map","_conductCheck","checkedKeys","halfCheckedKeys","concat","_useMemo3","rawValues","rawHalfCheckedKeys","selectValues","triggerChange","extra","source","eventValues","formattedKeyList","_ref","triggerValue","selected","returnValues","halfValues","filter","includes","additionalInfo","preValue","showPosition","checked","onInternalSelect","selectValue","option","eventValue","_splitRawValues2","_conductCheck2","onInternalDeselect","_splitRawValues3","_conductCheck3","onInternalClear","onInternalDropdownVisibleChange","useCallback","open","legacyParam","Object","defineProperty","get","process","env","NODE_ENV","selectProps","optionLabelProp","optionFilterProp","dropdownAlign","internalProps","mark","onClear","skipTriggerChange","skipTriggerSelect","onRawSelect","onRawDeselect","filterOption","selectContext","checkable","createElement","Provider","mode","options","TreeSelect"],"sources":["C:/Users/hp/Downloads/3_Solution-20220727T090705Z-001/3_Solution/repo/node_modules/rc-tree-select/es/generate.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport generateSelector from \"rc-select/es/generate\";\nimport { getLabeledValue } from \"rc-select/es/utils/valueUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport omit from \"rc-util/es/omit\";\nimport { INTERNAL_PROPS_MARK } from \"rc-select/es/interface/generator\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport warning from \"rc-util/es/warning\";\nimport TreeNode from './TreeNode';\nimport { flattenOptions, filterOptions, isValueDisabled, findValueOption, addValue, removeValue, getRawValueLabeled, toArray, fillFieldNames } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { SelectContext } from './Context';\nimport useTreeData from './hooks/useTreeData';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport { formatStrategyKeys, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport { fillAdditionalInfo } from './utils/legacyUtil';\nimport useSelectValues from './hooks/useSelectValues';\nvar OMIT_PROPS = ['expandedKeys', 'treeData', 'treeCheckable', 'showCheckedStrategy', 'searchPlaceholder', 'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeNodeFilterProp', 'filterTreeNode', 'dropdownPopupAlign', 'treeDefaultExpandAll', 'treeCheckStrictly', 'treeExpandedKeys', 'treeLoadedKeys', 'treeMotion', 'onTreeExpand', 'onTreeLoad', 'labelRender', 'loadData', 'treeDataSimpleMode', 'treeNodeLabelProp', 'treeDefaultExpandedKeys'];\nexport default function generate(config) {\n  var prefixCls = config.prefixCls,\n      optionList = config.optionList;\n  var RefSelect = generateSelector({\n    prefixCls: prefixCls,\n    components: {\n      optionList: optionList\n    },\n    // Not use generate since we will handle ourself\n    convertChildrenToData: function convertChildrenToData() {\n      return null;\n    },\n    flattenOptions: flattenOptions,\n    // Handle `optionLabelProp` in TreeSelect component\n    getLabeledValue: getLabeledValue,\n    filterOptions: filterOptions,\n    isValueDisabled: isValueDisabled,\n    findValueOption: findValueOption,\n    omitDOMProps: function omitDOMProps(props) {\n      return omit(props, OMIT_PROPS);\n    }\n  });\n  RefSelect.displayName = 'Select'; // =================================================================================\n  // =                                      Tree                                     =\n  // =================================================================================\n\n  var RefTreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    var fieldNames = props.fieldNames,\n        multiple = props.multiple,\n        treeCheckable = props.treeCheckable,\n        treeCheckStrictly = props.treeCheckStrictly,\n        _props$showCheckedStr = props.showCheckedStrategy,\n        showCheckedStrategy = _props$showCheckedStr === void 0 ? 'SHOW_CHILD' : _props$showCheckedStr,\n        labelInValue = props.labelInValue,\n        loadData = props.loadData,\n        treeLoadedKeys = props.treeLoadedKeys,\n        _props$treeNodeFilter = props.treeNodeFilterProp,\n        treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n        treeNodeLabelProp = props.treeNodeLabelProp,\n        treeDataSimpleMode = props.treeDataSimpleMode,\n        treeData = props.treeData,\n        treeExpandedKeys = props.treeExpandedKeys,\n        treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n        treeDefaultExpandAll = props.treeDefaultExpandAll,\n        children = props.children,\n        treeIcon = props.treeIcon,\n        showTreeIcon = props.showTreeIcon,\n        switcherIcon = props.switcherIcon,\n        treeLine = props.treeLine,\n        treeMotion = props.treeMotion,\n        filterTreeNode = props.filterTreeNode,\n        dropdownPopupAlign = props.dropdownPopupAlign,\n        onChange = props.onChange,\n        onTreeExpand = props.onTreeExpand,\n        onTreeLoad = props.onTreeLoad,\n        onDropdownVisibleChange = props.onDropdownVisibleChange,\n        onSelect = props.onSelect,\n        onDeselect = props.onDeselect,\n        labelRender = props.labelRender;\n    var mergedCheckable = treeCheckable || treeCheckStrictly;\n    var mergedMultiple = multiple || mergedCheckable;\n    var treeConduction = treeCheckable && !treeCheckStrictly;\n    var mergedLabelInValue = treeCheckStrictly || labelInValue; // ======================= Tree Data =======================\n    // FieldNames\n\n    var mergedFieldNames = fillFieldNames(fieldNames, true); // Legacy both support `label` or `title` if not set.\n    // We have to fallback to function to handle this\n\n    var getTreeNodeTitle = function getTreeNodeTitle(node) {\n      if (!treeData) {\n        return node.title;\n      }\n\n      if (mergedFieldNames === null || mergedFieldNames === void 0 ? void 0 : mergedFieldNames.label) {\n        return node[mergedFieldNames.label];\n      }\n\n      return node.label || node.title;\n    };\n\n    var getTreeNodeLabelProp = function getTreeNodeLabelProp(entity, val) {\n      if (labelRender) {\n        return labelRender(entity, val);\n      } // Skip since entity not exist\n\n\n      if (!entity) {\n        return undefined;\n      }\n\n      var node = entity.data.node;\n\n      if (treeNodeLabelProp) {\n        return node[treeNodeLabelProp];\n      }\n\n      return getTreeNodeTitle(node);\n    };\n\n    var mergedTreeData = useTreeData(treeData, children, {\n      getLabelProp: getTreeNodeTitle,\n      simpleMode: treeDataSimpleMode,\n      fieldNames: mergedFieldNames\n    });\n    var flattedOptions = useMemo(function () {\n      return flattenOptions(mergedTreeData);\n    }, [mergedTreeData]);\n\n    var _useKeyValueMap = useKeyValueMap(flattedOptions),\n        _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n        cacheKeyMap = _useKeyValueMap2[0],\n        cacheValueMap = _useKeyValueMap2[1];\n\n    var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n        _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n        getEntityByKey = _useKeyValueMapping2[0],\n        getEntityByValue = _useKeyValueMapping2[1]; // Only generate keyEntities for check conduction when is `treeCheckable`\n\n\n    var _useMemo = useMemo(function () {\n      if (treeConduction) {\n        return convertDataToEntities(mergedTreeData);\n      }\n\n      return {\n        keyEntities: null\n      };\n    }, [mergedTreeData, treeCheckable, treeCheckStrictly]),\n        conductKeyEntities = _useMemo.keyEntities; // ========================== Ref ==========================\n\n\n    var selectRef = React.useRef(null);\n    React.useImperativeHandle(ref, function () {\n      return {\n        scrollTo: selectRef.current.scrollTo,\n        focus: selectRef.current.focus,\n        blur: selectRef.current.blur,\n\n        /** @private Internal usage. It's save to remove if `rc-cascader` not use it any longer */\n        getEntityByValue: getEntityByValue\n      };\n    }); // ========================= Value =========================\n\n    var _useMergedState = useMergedState(props.defaultValue, {\n      value: props.value\n    }),\n        _useMergedState2 = _slicedToArray(_useMergedState, 2),\n        value = _useMergedState2[0],\n        setValue = _useMergedState2[1];\n    /** Get `missingRawValues` which not exist in the tree yet */\n\n\n    var splitRawValues = function splitRawValues(newRawValues) {\n      var missingRawValues = [];\n      var existRawValues = []; // Keep missing value in the cache\n\n      newRawValues.forEach(function (val) {\n        if (getEntityByValue(val)) {\n          existRawValues.push(val);\n        } else {\n          missingRawValues.push(val);\n        }\n      });\n      return {\n        missingRawValues: missingRawValues,\n        existRawValues: existRawValues\n      };\n    };\n\n    var _useMemo2 = useMemo(function () {\n      var valueHalfCheckedKeys = [];\n      var newRawValues = [];\n      toArray(value).forEach(function (item) {\n        if (item && _typeof(item) === 'object' && 'value' in item) {\n          if (item.halfChecked && treeCheckStrictly) {\n            var entity = getEntityByValue(item.value);\n            valueHalfCheckedKeys.push(entity ? entity.key : item.value);\n          } else {\n            newRawValues.push(item.value);\n          }\n        } else {\n          newRawValues.push(item);\n        }\n      }); // We need do conduction of values\n\n      // We need do conduction of values\n      if (treeConduction) {\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n\n        var _conductCheck = conductCheck(keyList, true, conductKeyEntities),\n            checkedKeys = _conductCheck.checkedKeys,\n            halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n        return [[].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        }))), halfCheckedKeys];\n      }\n\n      return [newRawValues, valueHalfCheckedKeys];\n    }, [value, flattedOptions, mergedMultiple, mergedLabelInValue, treeCheckable, treeCheckStrictly]),\n        _useMemo3 = _slicedToArray(_useMemo2, 2),\n        rawValues = _useMemo3[0],\n        rawHalfCheckedKeys = _useMemo3[1];\n\n    var selectValues = useSelectValues(rawValues, {\n      treeConduction: treeConduction,\n      value: value,\n      showCheckedStrategy: showCheckedStrategy,\n      conductKeyEntities: conductKeyEntities,\n      getEntityByValue: getEntityByValue,\n      getEntityByKey: getEntityByKey,\n      getLabelProp: getTreeNodeLabelProp\n    });\n\n    var triggerChange = function triggerChange(newRawValues, extra, source) {\n      setValue(mergedMultiple ? newRawValues : newRawValues[0]);\n\n      if (onChange) {\n        var eventValues = newRawValues;\n\n        if (treeConduction && showCheckedStrategy !== 'SHOW_ALL') {\n          var keyList = newRawValues.map(function (val) {\n            var entity = getEntityByValue(val);\n            return entity ? entity.key : val;\n          });\n          var formattedKeyList = formatStrategyKeys(keyList, showCheckedStrategy, conductKeyEntities);\n          eventValues = formattedKeyList.map(function (key) {\n            var entity = getEntityByKey(key);\n            return entity ? entity.data.value : key;\n          });\n        }\n\n        var _ref = extra || {\n          triggerValue: undefined,\n          selected: undefined\n        },\n            triggerValue = _ref.triggerValue,\n            selected = _ref.selected;\n\n        var returnValues = mergedLabelInValue ? getRawValueLabeled(eventValues, value, getEntityByValue, getTreeNodeLabelProp) : eventValues; // We need fill half check back\n\n        if (treeCheckStrictly) {\n          var halfValues = rawHalfCheckedKeys.map(function (key) {\n            var entity = getEntityByKey(key);\n            return entity ? entity.data.value : key;\n          }).filter(function (val) {\n            return !eventValues.includes(val);\n          });\n          returnValues = [].concat(_toConsumableArray(returnValues), _toConsumableArray(getRawValueLabeled(halfValues, value, getEntityByValue, getTreeNodeLabelProp)));\n        }\n\n        var additionalInfo = {\n          // [Legacy] Always return as array contains label & value\n          preValue: selectValues,\n          triggerValue: triggerValue\n        }; // [Legacy] Fill legacy data if user query.\n        // This is expansive that we only fill when user query\n        // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n        var showPosition = true;\n\n        if (treeCheckStrictly || source === 'selection' && !selected) {\n          showPosition = false;\n        }\n\n        fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition);\n\n        if (mergedCheckable) {\n          additionalInfo.checked = selected;\n        } else {\n          additionalInfo.selected = selected;\n        }\n\n        onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : eventValues.map(function (val) {\n          var entity = getEntityByValue(val);\n          return entity ? entity.data.title : null;\n        }), additionalInfo);\n      }\n    };\n\n    var onInternalSelect = function onInternalSelect(selectValue, option, source) {\n      var eventValue = mergedLabelInValue ? selectValue : selectValue;\n\n      if (!mergedMultiple) {\n        // Single mode always set value\n        triggerChange([selectValue], {\n          selected: true,\n          triggerValue: selectValue\n        }, source);\n      } else {\n        var newRawValues = addValue(rawValues, selectValue); // Add keys if tree conduction\n\n        if (treeConduction) {\n          // Should keep missing values\n          var _splitRawValues2 = splitRawValues(newRawValues),\n              missingRawValues = _splitRawValues2.missingRawValues,\n              existRawValues = _splitRawValues2.existRawValues;\n\n          var keyList = existRawValues.map(function (val) {\n            return getEntityByValue(val).key;\n          });\n\n          var _conductCheck2 = conductCheck(keyList, true, conductKeyEntities),\n              checkedKeys = _conductCheck2.checkedKeys;\n\n          newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n            return getEntityByKey(key).data.value;\n          })));\n        }\n\n        triggerChange(newRawValues, {\n          selected: true,\n          triggerValue: selectValue\n        }, source);\n      }\n\n      if (onSelect) {\n        onSelect(eventValue, option);\n      }\n    };\n\n    var onInternalDeselect = function onInternalDeselect(selectValue, option, source) {\n      var eventValue = mergedLabelInValue ? selectValue : selectValue;\n      var newRawValues = removeValue(rawValues, selectValue); // Remove keys if tree conduction\n\n      if (treeConduction) {\n        var _splitRawValues3 = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues3.missingRawValues,\n            existRawValues = _splitRawValues3.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n\n        var _conductCheck3 = conductCheck(keyList, {\n          checked: false,\n          halfCheckedKeys: rawHalfCheckedKeys\n        }, conductKeyEntities),\n            checkedKeys = _conductCheck3.checkedKeys;\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: false,\n        triggerValue: selectValue\n      }, source);\n\n      if (onDeselect) {\n        onDeselect(eventValue, option);\n      }\n    };\n\n    var onInternalClear = function onInternalClear() {\n      triggerChange([], null, 'clear');\n    }; // ========================= Open ==========================\n\n\n    var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n      if (onDropdownVisibleChange) {\n        var legacyParam = {};\n        Object.defineProperty(legacyParam, 'documentClickClose', {\n          get: function get() {\n            warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n            return false;\n          }\n        });\n        onDropdownVisibleChange(open, legacyParam);\n      }\n    }, [onDropdownVisibleChange]); // ======================== Warning ========================\n\n    if (process.env.NODE_ENV !== 'production') {\n      warningProps(props);\n    } // ======================== Render =========================\n    // We pass some props into select props style\n\n\n    var selectProps = {\n      optionLabelProp: null,\n      optionFilterProp: treeNodeFilterProp,\n      dropdownAlign: dropdownPopupAlign,\n      internalProps: {\n        mark: INTERNAL_PROPS_MARK,\n        onClear: onInternalClear,\n        skipTriggerChange: true,\n        skipTriggerSelect: true,\n        onRawSelect: onInternalSelect,\n        onRawDeselect: onInternalDeselect\n      }\n    };\n\n    if ('filterTreeNode' in props) {\n      selectProps.filterOption = filterTreeNode;\n    }\n\n    var selectContext = React.useMemo(function () {\n      return {\n        checkable: mergedCheckable,\n        loadData: loadData,\n        treeLoadedKeys: treeLoadedKeys,\n        onTreeLoad: onTreeLoad,\n        checkedKeys: rawValues,\n        halfCheckedKeys: rawHalfCheckedKeys,\n        treeDefaultExpandAll: treeDefaultExpandAll,\n        treeExpandedKeys: treeExpandedKeys,\n        treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n        onTreeExpand: onTreeExpand,\n        treeIcon: treeIcon,\n        treeMotion: treeMotion,\n        showTreeIcon: showTreeIcon,\n        switcherIcon: switcherIcon,\n        treeLine: treeLine,\n        treeNodeFilterProp: treeNodeFilterProp,\n        getEntityByKey: getEntityByKey,\n        getEntityByValue: getEntityByValue\n      };\n    }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawValues, rawHalfCheckedKeys, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, getEntityByKey, getEntityByValue]);\n    return /*#__PURE__*/React.createElement(SelectContext.Provider, {\n      value: selectContext\n    }, /*#__PURE__*/React.createElement(RefSelect, _extends({\n      ref: selectRef,\n      mode: mergedMultiple ? 'multiple' : null\n    }, props, selectProps, {\n      value: selectValues // We will handle this ourself since we need calculate conduction\n      ,\n      labelInValue: true,\n      options: mergedTreeData,\n      onChange: null,\n      onSelect: null,\n      onDeselect: null,\n      onDropdownVisibleChange: onInternalDropdownVisibleChange\n    })));\n  });\n  RefTreeSelect.displayName = 'TreeSelect'; // =================================================================================\n  // =                                    Generic                                    =\n  // =================================================================================\n\n  var TreeSelect = RefTreeSelect;\n  TreeSelect.TreeNode = TreeNode;\n  TreeSelect.SHOW_ALL = SHOW_ALL;\n  TreeSelect.SHOW_PARENT = SHOW_PARENT;\n  TreeSelect.SHOW_CHILD = SHOW_CHILD;\n  return TreeSelect;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}